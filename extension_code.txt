
================================================================================
File: build.ts
================================================================================

// build.ts
import autoprefixer from 'autoprefixer'
import fs from 'fs-extra'
import { dirname, resolve } from 'path'
import postcss from 'postcss'
import tailwindcss from 'tailwindcss'
import { fileURLToPath } from 'url'
import { build } from 'vite'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

async function buildExtension() {
    // Clean dist folder first
    console.log('Cleaning dist folder...')
    await fs.remove('dist')
    await fs.ensureDir('dist')

    // Process CSS with Tailwind first
    console.log('Processing Tailwind CSS...')
    const cssContent = await fs.readFile('src/index.css', 'utf8')
    const result = await postcss([
        tailwindcss('./tailwind.config.js'),
        autoprefixer
    ]).process(cssContent, {
        from: 'src/index.css',
        to: 'dist/assets/popup.css'
    })

    // Make sure assets folder exists
    await fs.ensureDir('dist/assets')

    // Write processed CSS
    await fs.writeFile('dist/assets/popup.css', result.css)
    console.log('Tailwind CSS processed and saved')

    // Build in sequence
    console.log('Building popup...')
    await build({
        configFile: resolve(__dirname, 'vite.popup.config.ts'),
        mode: 'production'
    })

    console.log('Building background script...')
    await build({
        configFile: resolve(__dirname, 'vite.background.config.ts'),
        mode: 'production'
    })

    console.log('Building content script...')
    await build({
        configFile: resolve(__dirname, 'vite.content.config.ts'),
        mode: 'production'
    })

    // Copy manifest
    console.log('Copying manifest...')
    await fs.copy(
        resolve(__dirname, 'public/manifest.json'),
        resolve(__dirname, 'dist/manifest.json')
    )

    // Update popup.html to correctly reference the CSS
    console.log('Updating popup.html...')
    let popupHtml = await fs.readFile('dist/popup.html', 'utf8')
    if (!popupHtml.includes('href="./assets/popup.css"')) {
        popupHtml = popupHtml.replace(
            '</head>',
            '<link rel="stylesheet" href="./assets/popup.css"></head>'
        )
        await fs.writeFile('dist/popup.html', popupHtml)
    }

    console.log('Build complete!')
}

buildExtension().catch((err) => {
    console.error('Build failed:', err)
    process.exit(1)
})


================================================================================
File: eslint.config.js
================================================================================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)



================================================================================
File: icons.js
================================================================================

// This is a standalone script to create icons
// Run with Node.js: node create-icons.js

import { existsSync, mkdirSync, writeFileSync } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const ICONS_DIR = path.join(__dirname, 'public', 'icons');

// Create basic SVG icon content
const createIconSVG = (size) => `
<svg xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" fill="none">
  <rect width="${size}" height="${size}" rx="${size / 8}" fill="#4F46E5"/>
  <path d="M${size / 4} ${size / 2} L${size / 2} ${3 * size / 4} L${3 * size / 4} ${size / 4}" stroke="white" stroke-width="${size / 16}" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`;

// Ensure directory exists
if (!existsSync(ICONS_DIR)) {
  mkdirSync(ICONS_DIR, { recursive: true });
  console.log(`Created directory: ${ICONS_DIR}`);
}

// Create icons of different sizes
const sizes = [16, 48, 128];
sizes.forEach(size => {
  const iconPath = path.join(ICONS_DIR, `icon${size}.svg`);
  writeFileSync(iconPath, createIconSVG(size));
  console.log(`Created icon: ${iconPath}`);
});

console.log('All icons created successfully!');


================================================================================
File: package.json
================================================================================

{
  "name": "extension",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --config vite.popup.config.ts",
    "build": "rimraf dist && tsx build.ts",
    "build:chrome": "rimraf dist && cross-env TARGET=chrome tsx build.ts",
    "build:firefox": "rimraf dist && cross-env TARGET=firefox tsx build.ts"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.19.0",
    "@tailwindcss": "link:types/@tailwindcss",
    "@types/chrome": "^0.0.306",
    "@types/fs-extra": "^11.0.4",
    "@types/node": "^20.17.19",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "cross-env": "^7.0.3",
    "eslint": "^9.19.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.18",
    "fs-extra": "^11.3.0",
    "globals": "^15.14.0",
    "postcss": "^8.5.3",
    "rimraf": "^6.0.1",
    "tailwindcss": "^3.4.17",
    "tsx": "^4.19.3",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.22.0",
    "vite": "^6.1.0",
    "vite-plugin-web-extension": "^4.4.3"
  }
}



================================================================================
File: popup.html
================================================================================

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Navigator AI</title>
  <link rel="stylesheet" href="./assets/popup.css">
  <style>
    body {
      width: 400px;
      min-height: 550px;
      margin: 0;
      padding: 0;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      background-color: transparent !important;
      color-scheme: light dark;
      overflow: hidden;
      border-radius: 8px;
    }

    #root {
      width: 100%;
      height: 100%;
      position: relative;
      background-color: transparent !important;
    }

    /* Container styles for draggable popup */
    .popup-container {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 9999;
      box-shadow: none !important;
      border-radius: 8px;
      cursor: move;
      transition: transform 0.2s ease;
      background-color: transparent !important;
    }

    .popup-container:hover {
      transform: translateY(-2px);
    }

    /* Handle for dragging */
    .drag-handle {
      cursor: move;
      user-select: none;
    }

    /* Ensure the popup is visible against any background */
    .popup-wrapper {
      border: 1px solid rgba(30, 41, 59, 0.4);
      border-radius: 8px;
      overflow: hidden;
      background-color: transparent !important;
    }

    /* Add these media queries to handle light/dark modes with better transparency */
    @media (prefers-color-scheme: light) {
      body {
        background-color: transparent !important;
      }

      /* Force all potential white backgrounds to be transparent */
      #root>div,
      .bg-white,
      [class*="bg-slate"],
      [class*="bg-gray"] {
        background-color: transparent !important;
      }
    }

    @media (prefers-color-scheme: dark) {
      body {
        background-color: transparent !important;
      }
    }
  </style>
  <!-- <script>
    // Add this script to make the popup draggable
    document.addEventListener('DOMContentLoaded', function () {
      let isDragging = false;
      let offsetX, offsetY;

      // Store position in local storage
      function loadPosition() {
        const position = localStorage.getItem('popupPosition');
        if (position) {
          const { left, top } = JSON.parse(position);
          const container = document.querySelector('.popup-container');
          if (container) {
            container.style.left = left + 'px';
            container.style.top = top + 'px';
            container.style.right = 'auto';
            container.style.bottom = 'auto';
          }
        }
      }

      // Add event listeners to make popup draggable
      setTimeout(() => {
        const container = document.querySelector('.popup-container') || document.querySelector('#root > div');
        const handle = document.querySelector('.drag-handle') || document.querySelector('#root header');

        if (container && handle) {
          // Add class to container if not present
          if (!container.classList.contains('popup-container')) {
            container.classList.add('popup-container');
          }

          // Add class to handle if not present
          if (!handle.classList.contains('drag-handle')) {
            handle.classList.add('drag-handle');
          }

          // Wrap content if not wrapped
          if (!container.querySelector('.popup-wrapper')) {
            const wrapper = document.createElement('div');
            wrapper.className = 'popup-wrapper';
            // Move all children to wrapper
            while (container.firstChild) {
              wrapper.appendChild(container.firstChild);
            }
            container.appendChild(wrapper);
          }

          // Initialize dragging
          handle.addEventListener('mousedown', startDrag);
          loadPosition();
        }
      }, 100);

      function startDrag(e) {
        const container = document.querySelector('.popup-container');
        if (!container) return;

        isDragging = true;

        // Get current position
        const rect = container.getBoundingClientRect();

        // Calculate offset
        offsetX = e.clientX - rect.left;
        offsetY = e.clientY - rect.top;

        // Add move and up listeners
        document.addEventListener('mousemove', onDrag);
        document.addEventListener('mouseup', stopDrag);

        // Prevent text selection during drag
        e.preventDefault();
      }

      function onDrag(e) {
        if (!isDragging) return;

        const container = document.querySelector('.popup-container');
        if (!container) return;

        // Calculate new position
        const left = e.clientX - offsetX;
        const top = e.clientY - offsetY;

        // Apply new position
        container.style.left = left + 'px';
        container.style.top = top + 'px';
        container.style.right = 'auto';
        container.style.bottom = 'auto';

        // Save position to local storage
        localStorage.setItem('popupPosition', JSON.stringify({ left, top }));
      }

      function stopDrag() {
        isDragging = false;
        document.removeEventListener('mousemove', onDrag);
        document.removeEventListener('mouseup', stopDrag);
      }
    });
  </script> -->
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
</body>

</html>


================================================================================
File: postcss.config.js
================================================================================

export const plugins = {
    tailwindcss: {},
    autoprefixer: {},
}; 


================================================================================
File: tailwind.config.js
================================================================================

/** @type {import('tailwindcss').Config} */
export default {
    content: [
        "./popup.html",
        "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
        extend: {
            animation: {
                'slide-up': 'slideUp 0.3s ease-out',
                'slide-down': 'slideDown 0.3s ease-out',
                'pulse': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
            },
            keyframes: {
                slideUp: {
                    '0%': { transform: 'translateY(100%)' },
                    '100%': { transform: 'translateY(0)' },
                },
                slideDown: {
                    '0%': { transform: 'translateY(0)' },
                    '100%': { transform: 'translateY(100%)' },
                },
                pulse: {
                    '0%, 100%': { opacity: 1 },
                    '50%': { opacity: 0.5 },
                }
            }
        },
    },
    plugins: [],
}


================================================================================
File: tsconfig.app.json
================================================================================

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}



================================================================================
File: tsconfig.json
================================================================================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}



================================================================================
File: tsconfig.node.json
================================================================================

{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.popup.config.ts"]
}



================================================================================
File: vite.background.config.ts
================================================================================

import { dirname, resolve } from 'path'
import { fileURLToPath } from 'url'
import { defineConfig } from 'vite'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

export default defineConfig({
    build: {
        outDir: 'dist',
        emptyOutDir: false, // Important: don't clear dist folder
        lib: {
            entry: resolve(__dirname, 'src/background.ts'),
            formats: ['iife'],
            name: 'background',
            fileName: () => 'background.js'
        },
        rollupOptions: {
            output: {
                extend: true,
                dir: 'dist',
                entryFileNames: 'background.js'
            }
        }
    }
})


================================================================================
File: vite.content.config.ts
================================================================================

import { dirname, resolve } from 'path'
import { fileURLToPath } from 'url'
import { defineConfig } from 'vite'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

export default defineConfig({
    build: {
        outDir: 'dist',
        emptyOutDir: false, // Important: don't clear dist folder
        lib: {
            entry: resolve(__dirname, 'src/content.ts'),
            formats: ['iife'],
            name: 'content',
            fileName: () => 'content.js'
        }
    }
})


================================================================================
File: vite.popup.config.ts
================================================================================

import react from '@vitejs/plugin-react'
import autoprefixer from 'autoprefixer'
import { dirname, resolve } from 'path'
import tailwindcss from 'tailwindcss'
import { fileURLToPath } from 'url'
import { defineConfig } from 'vite'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

export default defineConfig({
  plugins: [react()],
  css: {
    postcss: {
      plugins: [
        tailwindcss('./tailwind.config.js'),
        autoprefixer()
      ]
    }
  },
  build: {
    outDir: 'dist',
    emptyOutDir: false,
    rollupOptions: {
      input: {
        popup: resolve(__dirname, 'popup.html')
      },
      output: {
        format: 'es',
        dir: 'dist',
        entryFileNames: '[name].js',
        assetFileNames: 'assets/[name].[ext]'
      }
    }
  }
})


================================================================================
File: public/manifest.json
================================================================================

{
  "manifest_version": 3,
  "name": "Navigator AI",
  "version": "1.0.0",
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.svg",
      "48": "icons/icon48.svg",
      "128": "icons/icon128.svg"
    }
  },
  "background": {
    "service_worker": "background.js",
    "type": "module"
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["content.js"],
      "run_at": "document_idle",
      "all_frames": false
    }
  ],
  "permissions": ["activeTab", "scripting", "storage", "tabs"],
  "host_permissions": ["<all_urls>"],
  "content_security_policy": {
    "extension_pages": "script-src 'self'; object-src 'self'; style-src 'self' 'unsafe-inline'"
  },
  "web_accessible_resources": [
    {
      "resources": ["popup.html", "assets/*", "icons/*"],
      "matches": ["<all_urls>"]
    }
  ],
  "icons": {
    "16": "icons/icon16.svg",
    "48": "icons/icon48.svg",
    "128": "icons/icon128.svg"
  }
}



================================================================================
File: src/App.css
================================================================================

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



================================================================================
File: src/App.tsx
================================================================================

import { useState } from 'react'
import './App.css'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'


function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.tsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  )
}

export default App



================================================================================
File: src/background.ts
================================================================================

/* eslint-disable @typescript-eslint/no-explicit-any */
import { DOMUpdate, Message } from './types';

console.log('Background script initializing...');

const API_BASE_URL = 'http://localhost:8000';
let monitoringInterval: NodeJS.Timeout | null = null;
const MAX_ITERATIONS = 2;
let currentIterations = 0;
let isPaused = false;

// Store active task session
let activeSession: {
    taskId: string;
    status: 'active' | 'completed' | 'error' | 'paused';
    isPaused?: boolean;
    isRunning?: boolean;
} | null = null;

// Initialize session from storage on extension load
chrome.storage.local.get(['activeSession'], (result) => {
    console.log('Loaded active session from storage:', result.activeSession);
    if (result.activeSession) {
        activeSession = result.activeSession;
        isPaused = result.activeSession.isPaused || false;
    }
});

// Helper function to check if a URL is accessible by content scripts
function isValidUrl(url: string): boolean {
    return typeof url === 'string' &&
        !url.startsWith('chrome://') &&
        !url.startsWith('chrome-extension://') &&
        !url.startsWith('chrome-search://') &&
        !url.startsWith('about:') &&
        !url.startsWith('edge://') &&
        !url.startsWith('brave://');
}

// Handle extension icon click
chrome.action.onClicked.addListener((tab) => {
    console.log('Extension icon clicked, toggling UI in tab:', tab.id);
    if (tab.id && tab.url && isValidUrl(tab.url)) {
        chrome.tabs.sendMessage(tab.id, { action: "toggleUI" })
            .catch(err => {
                console.error('Error sending toggleUI message:', err);
                // Try injecting content script if it's not loaded
                chrome.scripting.executeScript({
                    target: { tabId: tab.id! },
                    files: ['content.js']
                })
                    .then(() => {
                        // Now try sending the message again
                        chrome.tabs.sendMessage(tab.id!, { action: "toggleUI" });
                    })
                    .catch(injectErr => {
                        console.error('Failed to inject content script:', injectErr);
                    });
            });
    } else {
        console.log('Cannot toggle UI on this page (likely a chrome:// URL)');
    }
});

chrome.runtime.onMessage.addListener((message: Message, sender, sendResponse) => {
    console.log('Background received message:', message.type, sender?.tab?.id);

    try {
        if (message.type === 'startTask') {
            handleStartTask(message, sendResponse);
            return true; // Keep channel open for async response
        } else if (message.type === 'startMonitoring') {
            startMonitoring(message.task_id!);
            sendResponse({ success: true });
        } else if (message.type === 'stopMonitoring') {
            stopMonitoring();
            sendResponse({ success: true });
        } else if (message.type === 'dom_update') {
            handleDOMUpdate(message);
            sendResponse({ success: true });
        } else if (message.type === 'toggleUI') {
            // Find the active tab and send toggle message
            chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
                if (tabs.length > 0 && tabs[0].id && tabs[0].url && isValidUrl(tabs[0].url)) {
                    chrome.tabs.sendMessage(tabs[0].id, { action: "toggleUI" })
                        .then(() => {
                            sendResponse({ success: true });
                        })
                        .catch(err => {
                            console.error('Error sending toggleUI:', err);
                            sendResponse({ success: false, error: err.message });
                        });
                } else {
                    console.log('Cannot toggle UI on this page (likely a chrome:// URL)');
                    sendResponse({ success: false, error: 'Cannot toggle UI on this page' });
                }
            });
            return true; // Keep channel open for async response
        } else if (message.type === 'pauseMonitoring') {
            pauseMonitoring();
            sendResponse({ success: true });
        } else if (message.type === 'resumeMonitoring') {
            resumeMonitoring();
            sendResponse({ success: true });
        }
    } catch (error) {
        console.error('Error in background script:', error);
        sendResponse({ success: false, error: 'Background script error' });
    }

    return true; // Keep channel open for async response
});

async function handleDOMUpdate(message: Message) {
    if (!message.task_id || !message.dom_data) {
        console.error('Missing required fields in DOM update');
        return;
    }

    const updateData: DOMUpdate = {
        task_id: message.task_id,
        dom_data: message.dom_data,
        result: Array.isArray(message.result) ? message.result : [],
        iterations: currentIterations
    };

    try {
        console.log('Sending DOM update to API:', updateData.task_id);
        const response = await fetch(`${API_BASE_URL}/tasks/update`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData),
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(`Server error ${response.status}: ${JSON.stringify(errorData)}`);
        }

        const data = await response.json();
        console.log('DOM update successful:', data);
    } catch (error) {
        console.error('Error sending DOM update:', error);
        // Optionally update active session status on error
        if (activeSession) {
            activeSession.status = 'error';
            await chrome.storage.local.set({ activeSession });
        }
    }
}

async function handleStartTask(message: Message, sendResponse: (response?: any) => void) {
    try {
        console.log('Starting task:', message.task);

        // If there's an active session, use that task ID
        if (activeSession?.taskId && activeSession.status === 'active') {
            console.log('Using existing active session:', activeSession.taskId);
            sendResponse({ task_id: activeSession.taskId });
            return;
        }

        // Otherwise create a new task
        console.log('Creating new task with server');
        const response = await fetch(`${API_BASE_URL}/tasks/create`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ task: message.task }),
        });

        const data = await response.json();
        console.log('Task created successfully:', data.task_id);

        // Store the new session
        activeSession = {
            taskId: data.task_id,
            status: 'active',
            isPaused: false
        };

        // Persist session
        await chrome.storage.local.set({ activeSession });

        sendResponse({ task_id: data.task_id });
    } catch (error) {
        console.error('Error creating task:', error);
        sendResponse({ error: 'Failed to create task' });
    }
}

function startMonitoring(task_id: string) {
    console.log('Starting monitoring for task:', task_id);

    if (monitoringInterval) {
        clearInterval(monitoringInterval);
    }

    currentIterations = 0;
    isPaused = false;

    monitoringInterval = setInterval(async () => {
        if (isPaused) {
            console.log('Monitoring is paused, skipping iteration');
            return;
        }

        if (currentIterations >= MAX_ITERATIONS) {
            console.log('Reached max iterations, stopping monitoring');
            stopMonitoring();
            if (activeSession) {
                activeSession.status = 'completed';
                await chrome.storage.local.set({ activeSession });

                // Also update taskState to ensure popup display is correct
                const taskState = await chrome.storage.local.get(['taskState']);
                if (taskState.taskState) {
                    await chrome.storage.local.set({
                        taskState: {
                            ...taskState.taskState,
                            status: 'completed',
                            isRunning: false
                        }
                    });
                }

                chrome.runtime.sendMessage({
                    type: 'stopMonitoring',
                    task_id
                });
            }
            return;
        }

        const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
        if (tabs[0]?.id && tabs[0]?.url && isValidUrl(tabs[0].url)) {
            try {
                console.log('Processing DOM for iteration:', currentIterations + 1);

                // Try sending message directly first, only inject if needed
                try {
                    // Send message to process DOM
                    await chrome.tabs.sendMessage(tabs[0].id, {
                        type: 'processDOM',
                        task_id
                    });
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                } catch (msgError) {
                    // Content script not loaded yet, inject it first
                    console.log('Content script not loaded, injecting it...');
                    await chrome.scripting.executeScript({
                        target: { tabId: tabs[0].id },
                        files: ['content.js']
                    });

                    // Now send the message
                    await chrome.tabs.sendMessage(tabs[0].id, {
                        type: 'processDOM',
                        task_id
                    });
                }

                currentIterations++;
                chrome.runtime.sendMessage({
                    type: 'iterationUpdate',
                    iterations: currentIterations
                });
                // Update popup with current iterations
                const taskState = await chrome.storage.local.get(['taskState']);
                if (taskState.taskState) {
                    await chrome.storage.local.set({
                        taskState: {
                            ...taskState.taskState,
                            iterations: currentIterations
                        }
                    });
                }
            } catch (error) {
                console.error('Error in monitoring loop:', error);
                if (activeSession) {
                    activeSession.status = 'error';
                    await chrome.storage.local.set({ activeSession });
                }
            }
        } else {
            console.log('Cannot process DOM on this page (likely a chrome:// URL). Skipping this iteration.');
        }
    }, 2000);
}

function stopMonitoring() {
    console.log('Stopping monitoring');
    if (monitoringInterval) {
        clearInterval(monitoringInterval);
        monitoringInterval = null;
    }
}

function pauseMonitoring() {
    console.log('Pausing automation monitoring');
    isPaused = true;

    if (activeSession) {
        activeSession.isPaused = true;
        chrome.storage.local.set({ activeSession });
    }

    chrome.runtime.sendMessage({
        type: 'pauseStateChanged',
        isPaused: true
    });
}

function resumeMonitoring() {
    console.log('Resuming automation monitoring');
    isPaused = false;

    if (activeSession) {
        activeSession.isPaused = false;
        chrome.storage.local.set({ activeSession });
    }

    chrome.runtime.sendMessage({
        type: 'pauseStateChanged',
        isPaused: false
    });
}


================================================================================
File: src/content.ts
================================================================================

import { FrontendDOMState, Message } from './types';

console.log('Content script loaded');

// Function to create the extension container
function createExtensionContainer() {
    console.log('Creating extension container');

    // Check if container already exists
    let container = document.getElementById('browser-automation-extension');
    if (container) {
        console.log('Container already exists');
        container.style.display = 'block';
        return container;
    }

    // Create container for the extension
    container = document.createElement('div');
    container.id = 'browser-automation-extension';

    // Only set these essential properties directly on the container
    container.style.position = 'fixed';
    container.style.bottom = '20px';
    container.style.right = '20px';
    container.style.zIndex = '9999999'; // Still high but not maximum
    container.style.pointerEvents = 'none'; // Important! Allow clicks to pass through
    container.style.transition = 'all 0.3s ease';

    // Create a shadow root - this isolates our CSS
    const shadow = container.attachShadow({ mode: 'closed' });

    // Create a wrapper inside the shadow DOM that will catch pointer events
    const wrapper = document.createElement('div');
    wrapper.className = 'extension-wrapper';
    wrapper.style.pointerEvents = 'auto';
    wrapper.style.position = 'relative';

    // Create styles for shadow DOM
    const style = document.createElement('style');
    style.textContent = `
        .extension-wrapper {
            width: 400px;
            height: auto;
            max-height: 550px;
            background-color: transparent !important;
        }
        iframe {
            width: 100%;
            height: 550px;
            border: none;
            border-radius: 8px;
            box-shadow: none !important;
            background-color: transparent !important;
            color-scheme: gjfdk fjskl;
            opacity: 0.98;
        }
        .drag-handle {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 30px;
            cursor: move;
            z-index: 1;
        }
    `;

    // Create iframe
    const iframe = document.createElement('iframe');
    iframe.src = chrome.runtime.getURL('popup.html');
    iframe.style.backgroundColor = 'transparent';
    iframe.style.backdropFilter = 'none';
    // iframe.style.webkitBackdropFilter = 'none';
    iframe.style.opacity = '0.98';
    iframe.allow = 'autoplay';

    // Create drag handle
    const dragHandle = document.createElement('div');
    dragHandle.className = 'drag-handle';

    // Add elements to shadow DOM
    shadow.appendChild(style);
    shadow.appendChild(wrapper);
    wrapper.appendChild(iframe);
    wrapper.appendChild(dragHandle);

    // Add container to document body
    document.body.appendChild(container);

    // Make draggable
    initDraggable(container, dragHandle);

    return container;
}

// Initialize draggable functionality
function initDraggable(container: HTMLElement, dragHandle: HTMLElement) {
    let isDragging = false;
    let initialX: number;
    let initialY: number;
    let startPositionX: number;
    let startPositionY: number;

    // Store position in local storage
    function savePosition(x: number, y: number) {
        localStorage.setItem('popupPosition', JSON.stringify({ left: x, top: y }));
    }

    function loadPosition() {
        try {
            const position = localStorage.getItem('popupPosition');
            if (position) {
                const { left, top } = JSON.parse(position);
                container.style.left = left + 'px';
                container.style.top = top + 'px';
                container.style.right = 'auto';
                container.style.bottom = 'auto';
            }
        } catch (e) {
            console.error('Error loading position:', e);
        }
    }

    // Set initial position from storage or default
    loadPosition();

    // Handle mousedown event to start drag
    dragHandle.addEventListener('mousedown', (e) => {
        // Only handle left mouse button
        if (e.button !== 0) return;

        // Check if the element has the drag-handle class
        // This ensures dragging only works when minimized
        if (!dragHandle.classList.contains('drag-handle')) return;

        e.preventDefault();
        e.stopPropagation();

        // Get current container position
        const style = window.getComputedStyle(container);
        startPositionX = parseInt(style.left, 10) || 0;
        startPositionY = parseInt(style.top, 10) || 0;

        // Calculate offset from mouse to container corner
        initialX = e.clientX - startPositionX;
        initialY = e.clientY - startPositionY;

        isDragging = true;
        container.classList.add('dragging');

        // Add document-wide event listeners
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
        document.addEventListener('mouseleave', onMouseUp);
    });

    function onMouseMove(e: MouseEvent) {
        if (!isDragging) return;

        e.preventDefault();
        e.stopPropagation();

        // Calculate new position
        const x = e.clientX - initialX;
        const y = e.clientY - initialY;

        // Constrain to viewport
        const maxX = window.innerWidth - container.offsetWidth;
        const maxY = window.innerHeight - container.offsetHeight;
        const newX = Math.max(0, Math.min(x, maxX));
        const newY = Math.max(0, Math.min(y, maxY));

        // Set the new position directly
        container.style.left = `${newX}px`;
        container.style.top = `${newY}px`;
        container.style.right = 'auto';
        container.style.bottom = 'auto';
    }

    function onMouseUp(e: MouseEvent) {
        if (!isDragging) return;

        e.preventDefault();
        e.stopPropagation();

        isDragging = false;
        container.classList.remove('dragging');

        // Save the final position
        const style = window.getComputedStyle(container);
        const finalX = parseInt(style.left, 10);
        const finalY = parseInt(style.top, 10);
        savePosition(finalX, finalY);

        // Clean up event listeners
        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
        document.removeEventListener('mouseleave', onMouseUp);
    }
}

// Process DOM and send data to background script
function processDOM(task_id: string): FrontendDOMState {
    try {
        console.log('Processing DOM for task:', task_id);
        const domData: FrontendDOMState = {
            url: window.location.href,
            html: document.documentElement.outerHTML,
            title: document.title,
            timestamp: new Date().toISOString()
        };

        // Send data back to background script
        chrome.runtime.sendMessage({
            type: 'dom_update',
            task_id,
            dom_data: domData,
            result: []
        });

        return domData;
    } catch (error) {
        console.error('Error processing DOM:', error);
        throw error;
    }
}

// Toggle UI visibility
function toggleUI() {
    console.log('Toggling UI');
    const container = createExtensionContainer();

    // Check current state
    const isHidden = container.style.display === 'none';

    if (isHidden) {
        container.style.display = 'block';
    } else {
        container.style.display = 'none';
    }

    return !isHidden;
}

// Listen for messages from the background script
chrome.runtime.onMessage.addListener((message: Message, _sender, sendResponse) => {
    console.log('Content script received message:', message);

    if (message.type === 'processDOM' && message.task_id) {
        createExtensionContainer(); // Ensure container exists
        processDOM(message.task_id);
        if (sendResponse) sendResponse({ success: true });
    }
    else if (message.type === 'toggleUI') {
        const isVisible = toggleUI();
        if (sendResponse) sendResponse({ success: true, isVisible });
    }

    return true; // Keep channel open for async response
});

// Initialize on content script load
console.log('Creating UI container on content script load');
createExtensionContainer();


================================================================================
File: src/index.css
================================================================================

@tailwind base;
@tailwind components;
@tailwind utilities;

/* All styles will be scoped within shadow DOM, so they won't leak */
:host {
  color-scheme: light dark;
}

/* These styles will only apply within the extension's shadow DOM */
.browser-automation-container {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 2147483647;
  width: 400px;
  min-width: 400px;
  background-color: transparent;
  border-radius: 8px;
  overflow: visible;
  box-shadow: none;
  will-change: transform, left, top;
  transform: translate3d(0, 0, 0);
  transition: box-shadow 0.3s ease;
}

/* Add strong visual feedback when dragging */
.browser-automation-container.dragging {
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.25);
  transition: none;
  cursor: grabbing;
}

/* Minimized popup styling */
.popup-minimized {
  @apply w-14 h-14 rounded-full bg-blue-600 cursor-pointer 
         flex items-center justify-center shadow-lg
         hover:bg-blue-700 transition-all duration-200;
}

/* Animation classes */
.animate-slide-up {
  animation: slideUp 0.3s ease-out forwards;
}

.animate-slide-down {
  animation: slideDown 0.3s ease-out forwards;
}

@keyframes slideUp {
  0% { transform: translateY(100%); }
  100% { transform: translateY(0); }
}

@keyframes slideDown {
  0% { transform: translateY(0); }
  100% { transform: translateY(100%); }
}

/* Glass morphism effect */
.bg-glass {
  @apply bg-slate-800/90 backdrop-blur-sm border border-slate-700/50;
}

/* Remove all white background colors */
.bg-white {
  background-color: transparent !important;
}

/* Ensure popup container is transparent */
.popup-container {
  background-color: transparent !important;
}

/* Enhance drag handle styling for better user experience */
.drag-handle {
  cursor: grab;
  user-select: none;
  position: relative;
  touch-action: none;
}

/* Show an active state when the handle is being dragged */
.drag-handle:active,
.dragging .drag-handle {
  cursor: grabbing;
}

/* Enhance the hover indicator for minimized state only */
.drag-handle:hover::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: rgba(100, 149, 237, 0.8);
  border-radius: 3px 3px 0 0;
}

/* Add these new styles for minimized state */
.fixed.bottom-4.right-4 .drag-handle {
  cursor: grab;
}

.fixed.bottom-4.right-4 .drag-handle:hover {
  cursor: grab;
  box-shadow: 0 0 0 2px rgba(100, 149, 237, 0.5);
}

.fixed.bottom-4.right-4 .drag-handle:active {
  cursor: grabbing;
}

/* Fix for popup.tsx container */
.w-96.bg-slate-800 {
  background-color: rgba(30, 41, 59, 0.5) !important; /* Much more transparent */
  backdrop-filter: blur(5px);
  width: 400px !important;
}

/* Add transparent background to any containers */
.min-w-96 {
  background-color: transparent !important;
}

/* Force transparent backgrounds in light mode */
@media (prefers-color-scheme: light) {
  /* Target the container and all its children */
  #browser-automation-extension,
  #browser-automation-extension * {
    background-color: transparent !important;
  }
  
  /* Fix common background classes */
  .bg-white, 
  .bg-slate-800, 
  .bg-slate-700,
  .bg-gray-50,
  .bg-gray-100,
  .bg-gray-200 {
    background-color: transparent !important;
  }
  
  /* Handle glass backgrounds specially in light mode */
  .bg-slate-800\/90,
  .bg-slate-700\/90 {
    background-color: rgba(51, 65, 85, 0.75) !important; /* Darker in light mode */
    backdrop-filter: blur(10px);
  }
}

/* Improve container visibility with better contrast */
.min-w-96 .h-full.w-full.flex.flex-col {
  background-color: rgba(30, 41, 59, 0.9) !important; 
  backdrop-filter: blur(10px);
}

/* Remove any box-shadow that might show in light mode */
iframe, 
.popup-container,
.browser-automation-container,
.extension-wrapper {
  box-shadow: none !important;
}


================================================================================
File: src/main.tsx
================================================================================

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import Popup from './popup'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <Popup />
  </React.StrictMode>,
)



================================================================================
File: src/popup.tsx
================================================================================

import { useEffect, useState } from 'react';
import type { Message, TaskState } from './types';

export default function Popup() {
    const [state, setState] = useState<TaskState>({
        taskId: null,
        status: 'idle',
        task: '',
        isRunning: false,
        isPaused: false,
        iterations: 0
    });
    const [isMinimized, setIsMinimized] = useState(false);

    useEffect(() => {
        console.log('Popup component mounted');

        // Add message listener for iteration updates
        const messageListener = (message: Message) => {
            if (message.type === 'iterationUpdate') {
                setState(prev => ({
                    ...prev,
                    iterations: message.iterations || prev.iterations
                }));
            } else if (message.type === 'stopMonitoring') {
                setState(prev => ({
                    ...prev,
                    status: 'completed',
                    isRunning: false
                }));

                // Update storage to persist the completed state
                chrome.storage.local.set({
                    taskState: {
                        ...state,
                        status: 'completed',
                        isRunning: false
                    }
                }).catch(err => console.error('Error saving completed state:', err));
            } else if (message.type === 'pauseStateChanged') {
                setState(prev => ({
                    ...prev,
                    isPaused: message.isPaused || false,
                    status: message.isPaused ? 'paused' : 'running'
                }));
            }
        };

        chrome.runtime.onMessage.addListener(messageListener);

        // Load both task state and active session
        chrome.storage.local.get(['taskState', 'isMinimized', 'activeSession'], (result) => {
            console.log('Loaded from storage:', result);

            if (result.taskState) {
                setState(result.taskState);
            }

            // Load minimized state
            if (result.isMinimized !== undefined) {
                setIsMinimized(result.isMinimized);
            }

            // If there's an active session, update the state
            if (result.activeSession?.taskId) {
                setState(prev => ({
                    ...prev,
                    taskId: result.activeSession.taskId,
                    status: result.activeSession.status === 'completed' ? 'completed' :
                        result.activeSession.status === 'error' ? 'error' :
                            result.activeSession.isPaused ? 'paused' : 'running',
                    isRunning: result.activeSession.status === 'active',
                    isPaused: result.activeSession.isPaused || false
                }));
            }
        });

        // Apply glass morphism style to body
        document.body.style.background = 'transparent';

        // Cleanup listener on unmount
        return () => {
            chrome.runtime.onMessage.removeListener(messageListener);
        };
    }, []);

    // Save minimized state when it changes
    useEffect(() => {
        chrome.storage.local.set({ isMinimized });
    }, [isMinimized]);

    // Add this effect to communicate minimized state changes
    useEffect(() => {
        // Communicate minimized state to content script
        const sendStateToContentScript = () => {
            if (typeof chrome !== 'undefined' && chrome.tabs) {
                chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
                    if (tabs[0] && tabs[0].id) {
                        chrome.tabs.sendMessage(tabs[0].id, {
                            type: 'updateMinimizedState',
                            isMinimized
                        }).catch(err => {
                            console.error('Error sending minimized state:', err);
                        });
                    }
                });
            }
        };

        sendStateToContentScript();
    }, [isMinimized]);

    const handleStartTask = async () => {
        if (!state.task.trim()) {
            return; // Don't start empty tasks
        }

        try {
            console.log('Starting task...');
            setState(prev => ({ ...prev, status: 'running' }));

            const message: Message = {
                type: 'startTask',
                task: state.task
            };

            const response = await chrome.runtime.sendMessage(message);
            console.log('Task started:', response);

            if (response?.task_id) {
                const newState: TaskState = {
                    ...state,
                    taskId: response.task_id,
                    status: 'running',
                    isRunning: true,
                    isPaused: false,
                    iterations: 0
                };

                await chrome.storage.local.set({ taskState: newState });
                setState(newState);

                // Start the monitoring loop
                chrome.runtime.sendMessage({ type: 'startMonitoring', task_id: response.task_id });
            }
        } catch (error) {
            console.error('Error starting task:', error);
            setState(prev => ({ ...prev, status: 'error' }));
        }
    };

    const handleStopTask = async () => {
        try {
            console.log('Stopping task...');
            setState(prev => ({ ...prev, status: 'idle' }));
            chrome.runtime.sendMessage({ type: 'stopMonitoring' });
            const newState: TaskState = {
                ...state,
                status: 'idle',
                isRunning: false,
                isPaused: false
            };
            await chrome.storage.local.set({ taskState: newState });
            setState(newState);
        } catch (error) {
            console.error('Error stopping task:', error);
        }
    };

    // Add pause functionality
    const handlePauseTask = async () => {
        try {
            console.log('Pausing task...');
            const newState: TaskState = {
                ...state,
                status: 'paused',
                isPaused: true
            };
            await chrome.storage.local.set({ taskState: newState });
            setState(newState);
            chrome.runtime.sendMessage({ type: 'pauseMonitoring' });
        } catch (error) {
            console.error('Error pausing task:', error);
        }
    };

    // Add resume functionality
    const handleResumeTask = async () => {
        try {
            console.log('Resuming task...');
            const newState: TaskState = {
                ...state,
                status: 'running',
                isPaused: false
            };
            await chrome.storage.local.set({ taskState: newState });
            setState(newState);
            chrome.runtime.sendMessage({ type: 'resumeMonitoring' });
        } catch (error) {
            console.error('Error resuming task:', error);
        }
    };

    // Status badge color
    const getStatusColor = () => {
        switch (state.status) {
            case 'running': return 'bg-green-500';
            case 'error': return 'bg-red-500';
            case 'idle': return 'bg-yellow-500';
            case 'completed': return 'bg-blue-500';
            case 'paused': return 'bg-orange-500';
            default: return 'bg-gray-400';
        }
    };

    // Status text
    const getStatusText = () => {
        switch (state.status) {
            case 'running': return 'Running';
            case 'error': return 'Error';
            case 'idle': return 'Idle';
            case 'completed': return 'Completed';
            case 'paused': return 'Paused';
            default: return 'Idle';
        }
    };

    if (isMinimized) {
        return (
            <div className="fixed bottom-4 right-4 z-50">
                <button
                    onClick={() => setIsMinimized(false)}
                    className="flex items-center justify-center w-14 h-14 rounded-full bg-slate-800/90 hover:bg-slate-700/90 text-white shadow-lg transition-all duration-300 hover:shadow-xl border border-slate-700/50 backdrop-blur-sm drag-handle"
                    title="Open Automation Panel"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-7 w-7"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                    </svg>
                </button>
                {state.isRunning && !state.isPaused && (
                    <div className="absolute -top-1 -right-1 w-4 h-4 rounded-full bg-green-500 animate-pulse border-2 border-white"></div>
                )}
                {state.isRunning && state.isPaused && (
                    <div className="absolute -top-1 -right-1 w-4 h-4 rounded-full bg-orange-500 border-2 border-white"></div>
                )}
            </div>
        );
    }

    return (
        <div className="min-w-96 h-full flex flex-col bg-transparent overflow-hidden">
            {/* Glass morphism container */}
            <div className="h-full w-full flex flex-col bg-slate-800/90 backdrop-blur-sm rounded-lg shadow-xl overflow-hidden border border-slate-700/50">
                {/* Header */}
                <div className="flex items-center justify-between px-5 py-4 bg-slate-700/90 border-b border-slate-600/90">
                    <h2 className="text-xl font-semibold text-white flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clipRule="evenodd" />
                        </svg>
                        Navigator AI
                    </h2>
                    <button
                        onClick={() => setIsMinimized(true)}
                        className="p-2 rounded-md text-slate-300 hover:text-white hover:bg-slate-600/90 focus:outline-none focus:ring-2 focus:ring-slate-400"
                        title="Minimize"
                    >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                    </button>
                </div>

                {/* Content */}
                <div className="flex-1 p-5 space-y-5 overflow-y-auto w-96">
                    <div>
                        <label htmlFor="task-input" className="block text-sm font-medium text-slate-300 mb-2">
                            Task Description
                        </label>
                        <input
                            id="task-input"
                            type="text"
                            value={state.task}
                            onChange={(e) => setState(prev => ({ ...prev, task: e.target.value }))}
                            placeholder="Enter what you want to automate..."
                            disabled={state.isRunning}
                            className="w-full px-4 py-3 bg-slate-700/80 border border-slate-600/90 rounded-md shadow-sm text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:opacity-60 disabled:cursor-not-allowed"
                        />
                    </div>

                    <div>
                        {!state.isRunning ? (
                            <button
                                onClick={handleStartTask}
                                disabled={!state.task.trim()}
                                className="w-full px-4 py-3 text-white bg-blue-600/90 hover:bg-blue-700/90 rounded-md shadow-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-60 disabled:cursor-not-allowed transition-colors"
                            >
                                Start Automation
                            </button>
                        ) : (
                            <div className="flex gap-2">
                                {!state.isPaused ? (
                                    <button
                                        onClick={handlePauseTask}
                                        className="flex-1 px-4 py-3 text-white bg-orange-600/90 hover:bg-orange-700/90 rounded-md shadow-sm font-medium focus:outline-none focus:ring-2 focus:ring-orange-500 transition-colors"
                                    >
                                        <div className="flex items-center justify-center gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                                            </svg>
                                            Pause
                                        </div>
                                    </button>
                                ) : (
                                    <button
                                        onClick={handleResumeTask}
                                        className="flex-1 px-4 py-3 text-white bg-green-600/90 hover:bg-green-700/90 rounded-md shadow-sm font-medium focus:outline-none focus:ring-2 focus:ring-green-500 transition-colors"
                                    >
                                        <div className="flex items-center justify-center gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
                                            </svg>
                                            Resume
                                        </div>
                                    </button>
                                )}
                                <button
                                    onClick={handleStopTask}
                                    className="flex-1 px-4 py-3 text-white bg-red-600/90 hover:bg-red-700/90 rounded-md shadow-sm font-medium focus:outline-none focus:ring-2 focus:ring-red-500 transition-colors"
                                >
                                    <div className="flex items-center justify-center gap-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clipRule="evenodd" />
                                        </svg>
                                        Stop
                                    </div>
                                </button>
                            </div>
                        )}
                    </div>

                    {/* Status Panel */}
                    <div className="p-4 bg-slate-700/80 rounded-lg border border-slate-600/90">
                        <div className="space-y-3">
                            <div className="flex justify-between items-center">
                                <span className="text-slate-400">Status:</span>
                                <div className="flex items-center space-x-2">
                                    <span className={`inline-block w-3 h-3 rounded-full ${getStatusColor()} ${state.isPaused ? '' : state.isRunning ? 'animate-pulse' : ''}`}></span>
                                    <span className="font-medium text-white">{getStatusText()}</span>
                                </div>
                            </div>

                            <div className="flex justify-between items-center pt-3 border-t border-slate-600/80">
                                <span className="text-slate-400">Task ID:</span>
                                <span className="font-mono text-xs bg-slate-800/80 px-2 py-1 rounded text-slate-300">
                                    {state.taskId ? state.taskId.substring(0, 10) : 'None'}
                                </span>
                            </div>

                            <div className="flex justify-between items-center pt-3 border-t border-slate-600/80">
                                <span className="text-slate-400">Iterations:</span>
                                <div className="flex items-center">
                                    <span className="font-medium text-white">{state.iterations}</span>
                                    {state.isRunning && state.iterations > 0 && !state.isPaused && (
                                        <span className="ml-2 text-xs px-2 py-0.5 bg-blue-500 rounded-full text-white">
                                            Running
                                        </span>
                                    )}
                                    {state.isRunning && state.isPaused && (
                                        <span className="ml-2 text-xs px-2 py-0.5 bg-orange-500 rounded-full text-white">
                                            Paused
                                        </span>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}


================================================================================
File: src/types.ts
================================================================================

export interface FrontendDOMState {
    url: string;
    html: string;
    title: string;
    timestamp: string;
}

export interface DOMUpdate {
    task_id: string;
    dom_data: FrontendDOMState;
    result: unknown[];
    iterations: number;
}

export interface Message {
    type: string;
    task?: string;
    task_id?: string;
    dom_data?: FrontendDOMState;
    result?: unknown[];
    iterations?: number;
    isPaused?: boolean;
}

export interface TaskState {
    taskId: string | null;
    status: 'idle' | 'running' | 'completed' | 'error' | 'paused';
    task: string;
    isRunning: boolean;
    iterations: number;
    isPaused: boolean;
}


================================================================================
File: src/vite-env.d.ts
================================================================================

/// <reference types="vite/client" />


